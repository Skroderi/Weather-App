{"version":3,"sources":["components/Form.js","components/Forecast.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","Fragment","id","onSubmit","submit","type","value","onChange","change","placeholder","form","onClick","location","className","disabled","isButtonDisabled","Forecast","Date","time","getHours","day","getUTCDay","temp","src","img","alt","Result","_props$data$current$","data","current","date","city","country","humidity","description","pressure","wind","error","forecasts","forecast","map","index","components_Forecast","key","main","dt","concat","weather","icon","errorMsg","ApiKey","App","state","inputValue","sunrise","sunset","latitude","longitude","amountPanels","handleInputChange","e","_this","setState","target","handleInputSubmit","preventDefault","Api","ForecastApi","alert","fetch","then","response","ok","Error","json","toLocaleString","name","sys","toFixed","speed","toUpperCase","catch","console","log","list","slice","handleGetLocation","navigator","geolocation","getCurrentPosition","position","coords","setTimeout","_this2","this","showFormLoc","test","userAgent","_this3","currentGeoApi","forecastGeoApi","src_components_Form","show","src_components_Result","Component","Boolean","window","hostname","match","ReactDOM","render","src_components_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df822752.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css';\r\nconst Form = (props) => {\r\n    return (\r\n        <>\r\n            <form id=\"form\" onSubmit={props.submit}>\r\n                <input type=\"text\" value={props.value} onChange={props.change} placeholder=\"ENTER CITY\" />\r\n            </form>\r\n            <button form=\"form\">Search</button>\r\n            <button onClick={props.location} className=\"locationBtn\" disabled={props.isButtonDisabled}>Get Location</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nconst Forecast = (props) => {\r\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"panel\">\r\n                <div className=\"hourDay\">\r\n                    <div className=\"hour\">{new Date(props.time * 1000).getHours() + ':00'}</div>\r\n                    <div className=\"day\">{days[new Date(props.day * 1000).getUTCDay()]}</div>\r\n                </div>\r\n                <div className=\"tempForecast\"> {props.temp} &#8451;</div>\r\n                <div className=\"icon\"><img src={props.img} alt=\"zdjęcie obrazujące pogode\" /></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\r\nimport './Result.css';\r\nimport Forecast from './Forecast';\r\n\r\nconst Result = (props) => {\r\n    const { date, city, temp, img, country, humidity, description, pressure, wind, error } = props.data.current[0];\r\n\r\n    // create single(3 hours) forecast weather\r\n    const forecasts = props.data.forecast.map((forecast, index) => <Forecast key={index} temp={forecast.main.temp} day={forecast.dt} time={forecast.dt} img={`https://openweathermap.org/img/w/${forecast.weather[0].icon}.png`} />);\r\n\r\n    // if any city match to weather base then show error\r\n    const errorMsg = (\r\n        <div>\r\n            <h4>Niestety nie mamy w bazie miasta {city}</h4>\r\n        </div>\r\n    )\r\n\r\n    let weather = null\r\n    if (!error && city) {\r\n        weather = (\r\n            <div className=\"main\">\r\n                <div className=\"first\">\r\n                    <div className=\"city\"> <h2>{city}, {country}</h2>\r\n                        <p><strong>{date}</strong></p>\r\n                    </div>\r\n\r\n                    <div className=\"temp\">\r\n                        <img src={img} alt=\"zdjęcie obrazujące pogode\" />\r\n                        <h1>{temp} &#8451;</h1>\r\n                    </div>\r\n                    <p>{description}</p>\r\n                    <div className='parametrs'>\r\n                        <div className=\"humidity other\">  Wilgotność: <h4>{humidity}</h4>\r\n                        </div>\r\n                        <div className=\"pressure other\"> Ciśnienie: <h4>{pressure}</h4>\r\n                        </div>\r\n                        <div className=\"wind other\"> Wiatr:<h4>{wind}</h4>\r\n                        </div >\r\n                    </div>\r\n                </div>\r\n                <div className='box' >\r\n                    <div className=\"box-content\" >\r\n                        {forecasts}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {error ? errorMsg : weather}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result'\nimport './App.css';\n\nconst ApiKey = '6a0340dcb344a8dd70d4b2361b8ea65b'\nclass App extends Component {\n  state = {\n    current: [\n      {\n        inputValue: '',\n        date: '',\n        city: '',\n        sunrise: '',\n        sunset: '',\n        temp: '',\n        pressure: '',\n        wind: '',\n        img: [],\n        country: '',\n        humidity: '',\n        description: '',\n        error: false\n      }\n    ],\n    forecast: [],\n    latitude: '',\n    longitude: '',\n    isButtonDisabled: false,\n    amountPanels: ''\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      inputValue: e.target.value\n    })\n  }\n\n  handleInputSubmit = (e) => {\n    e.preventDefault()\n    const Api = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.inputValue}&appid=${ApiKey}&units=metric`\n    const ForecastApi = `https://api.openweathermap.org/data/2.5/forecast?q=${this.state.inputValue}&appid=${ApiKey}&units=metric`\n\n    if (!this.state.inputValue) return alert('Wprowadź miasto!')\n\n    // Getting current weather info\n    fetch(Api)\n      .then(response => {\n        if (response.ok) return response\n        throw Error('Błąd')\n      })\n      .then(response => response.json())\n      .then(data => {\n        this.setState(({\n          current: [\n            {\n              inputValue: \"\",\n              error: false,\n              date: new Date().toLocaleString(),\n              city: data.name,\n              sunrise: data.sys.sunrise,\n              sunset: data.sys.sunset,\n              temp: data.main.temp.toFixed(1),\n              pressure: `${data.main.pressure} hPa`,\n              wind: `${(data.wind.speed * 3.6).toFixed(1)}  km/h`,\n              img: `https://openweathermap.org/img/w/${data.weather[0].icon}.png`,\n              country: data.sys.country,\n              humidity: `${data.main.humidity}%`,\n              description: data.weather[0].description.toUpperCase(),\n            }]\n        }))\n      })\n      .catch(error => {\n        console.log(error)\n        this.setState({\n          current: [{\n            error: true,\n            city: this.state.inputValue\n          }]\n        })\n      })\n\n\n    // Getting forecasts weather info\n    fetch(ForecastApi)\n      .then(response => {\n        if (response.ok) return response\n        throw Error('Błąd')\n      })\n      .then(response => response.json())\n      // Slice forecasts data to 10 obejcts  ---  1 obejct = 3 hours forecast weather\n      .then(forecast => forecast.list.slice(0, this.state.amountPanels)\n      )\n      .then(forecast => {\n        this.setState({\n          forecast\n        })\n      })\n      .catch(error => {\n        console.log(error)\n        this.setState({\n          current: [{\n            error: true,\n            city: this.state.inputValue\n          }]\n        })\n      })\n  }\n  // Get  geo location after click in button 'Get location'\n  handleGetLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        this.setState({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          isButtonDisabled: true\n        })\n      });\n      // Disabled button after click( anty spam  clicking)\n      setTimeout(() => this.setState({ isButtonDisabled: false }), 3000);\n    }\n    else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n  // Getting automaticaly geo location\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        this.setState({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        })\n      });\n    }\n    else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n\n    if (this.state.longitude) {\n      this.showFormLoc()\n    }\n    if (/Edge/.test(navigator.userAgent)) {\n      this.setState({\n        amountPanels: 5\n      })\n    } else {\n      this.setState({\n        amountPanels: 10\n      })\n    }\n\n  }\n\n  // Automaticaly get and show current and forecast weather if user allowed to share geo location\n  componentDidUpdate() {\n    const currentGeoApi = `https://api.openweathermap.org/data/2.5/weather?lat=${this.state.latitude}&lon=${this.state.longitude}&appid=${ApiKey}&units=metric`\n    const forecastGeoApi = `https://api.openweathermap.org/data/2.5/forecast?lat=${this.state.latitude}&lon=${this.state.longitude}&appid=${ApiKey}&units=metric`\n    if (this.state.latitude && this.state.longitude) {\n\n      // get current weather from geo loc\n      fetch(currentGeoApi)\n        .then(response => {\n          if (response.ok) return response\n          throw Error('Błąd')\n        })\n        .then(response => response.json())\n        .then(data => {\n          const time = new Date().toLocaleString()\n          this.setState({\n            current: [\n              {\n                inputValue: \"\",\n                error: false,\n                date: time,\n                city: data.name,\n                sunrise: data.sys.sunrise,\n                sunset: data.sys.sunset,\n                temp: data.main.temp.toFixed(1),\n                pressure: `${data.main.pressure} hPa`,\n                wind: `${(data.wind.speed * 3.6).toFixed(1)}  km/h`,\n                img: `https://openweathermap.org/img/w/${data.weather[0].icon}.png`,\n                country: data.sys.country,\n                humidity: `${data.main.humidity}%`,\n                description: data.weather[0].description.toUpperCase(),\n              }],\n            latitude: '',\n            longitude: '',\n          })\n        })\n        .catch(error => {\n          console.log(error)\n        })\n\n      // get forecast weather from geo loc\n      fetch(forecastGeoApi)\n        .then(response => {\n          if (response.ok) return response\n          throw Error('Błąd')\n        })\n        .then(response => response.json())\n        .then(forecast => forecast.list.slice(0, this.state.amountPanels))\n        .then(forecast => {\n          this.setState({\n            forecast\n          })\n        })\n        .catch(error => {\n          console.log(error)\n          this.setState({\n            current: [{\n              error: true,\n              city: this.state.inputValue\n            }]\n          })\n        })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Weather App</h1>\n        <Form\n          value={this.state.current.inputValue}\n          change={this.handleInputChange}\n          submit={this.handleInputSubmit}\n          location={this.handleGetLocation}\n          show={this.showFormLoc}\n          isButtonDisabled={this.state.isButtonDisabled} />\n        <Result data={this.state} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}