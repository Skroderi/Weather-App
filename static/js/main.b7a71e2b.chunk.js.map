{"version":3,"sources":["components/Form.js","components/Forecast.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","Fragment","id","onSubmit","submit","type","value","onChange","change","placeholder","form","disabled","isSearchButtonDisabled","onClick","location","className","isButtonDisabled","Forecast","Date","time","getHours","day","getUTCDay","temp","src","img","alt","Result","_props$data$current$","data","current","date","city","country","humidity","description","pressure","wind","error","forecasts","forecast","map","index","components_Forecast","key","main","dt","concat","weather","icon","errorMsg","ApiKey","App","state","inputValue","sunrise","sunset","latitude","longitude","handleInputChange","e","_this","setState","target","handleInputSubmit","preventDefault","Api","ForecastApi","alert","setTimeout","fetch","then","response","ok","Error","json","toLocaleString","name","sys","toFixed","speed","toUpperCase","catch","console","log","list","slice","handleGetLocation","navigator","geolocation","getCurrentPosition","position","coords","_this2","this","showFormLoc","_this3","currentGeoApi","forecastGeoApi","src_components_Form","show","src_components_Result","Component","Boolean","window","hostname","match","ReactDOM","render","src_components_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7a71e2b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css';\r\nconst Form = (props) => {\r\n    return (\r\n        <>\r\n            <form id=\"form\" onSubmit={props.submit}>\r\n                <input type=\"text\" value={props.value} onChange={props.change} placeholder=\"ENTER CITY\" />\r\n            </form>\r\n            <button form=\"form\" disabled={props.isSearchButtonDisabled}>Search</button>\r\n            <button onClick={props.location} className=\"locationBtn\" disabled={props.isButtonDisabled}>Get Location</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nconst Forecast = (props) => {\r\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"panel\">\r\n                <div className=\"hourDay\">\r\n                    <div className=\"hour\">{new Date(props.time * 1000).getHours() + ':00'}</div>\r\n                    <div className=\"day\">{days[new Date(props.day * 1000).getUTCDay()]}</div>\r\n                </div>\r\n                <div className=\"tempForecast\"> {props.temp} &#8451;</div>\r\n                <div className=\"icon\"><img src={props.img} alt=\"zdjęcie obrazujące pogode\" /></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\r\nimport './Result.css';\r\nimport Forecast from './Forecast';\r\n\r\nconst Result = (props) => {\r\n    const { date, city, temp, img, country, humidity, description, pressure, wind, error } = props.data.current[0];\r\n\r\n    // create single(3 hours) forecast weather\r\n    const forecasts = props.data.forecast.map((forecast, index) => <Forecast key={index} temp={forecast.main.temp} day={forecast.dt} time={forecast.dt} img={`https://openweathermap.org/img/w/${forecast.weather[0].icon}.png`} />);\r\n\r\n    // if any city match to weather base then show error\r\n    const errorMsg = (\r\n        <div className=\"error\">\r\n            <h4>Niestety nie mamy w bazie miasta {city}</h4>\r\n        </div>\r\n    )\r\n\r\n    let weather = null\r\n    if (!error && city) {\r\n        weather = (\r\n            <div className=\"main\">\r\n                <div className=\"first\">\r\n                    <div className=\"city\"> <h2>{city}, {country}</h2>\r\n                        <p><strong>{date}</strong></p>\r\n                    </div>\r\n\r\n                    <div className=\"temp\">\r\n                        <img src={img} alt=\"zdjęcie obrazujące pogode\" />\r\n                        <h1>{temp} &#8451;</h1>\r\n                    </div>\r\n                    <p>{description}</p>\r\n                    <div className='parametrs'>\r\n                        <div className=\"humidity other\">  Wilgotność: <h4>{humidity}</h4>\r\n                        </div>\r\n                        <div className=\"pressure other\"> Ciśnienie: <h4>{pressure}</h4>\r\n                        </div>\r\n                        <div className=\"wind other\"> Wiatr:<h4>{wind}</h4>\r\n                        </div >\r\n                    </div>\r\n                </div>\r\n                <div className='box' >\r\n                    <div className=\"box-content\" >\r\n                        {forecasts}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {error ? errorMsg : weather}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\r\nimport Form from './Form';\r\nimport Result from './Result'\r\nimport './App.css';\r\n\r\nconst ApiKey = '6a0340dcb344a8dd70d4b2361b8ea65b'\r\nclass App extends Component {\r\n  state = {\r\n    current: [\r\n      {\r\n        inputValue: '',\r\n        date: '',\r\n        city: '',\r\n        sunrise: '',\r\n        sunset: '',\r\n        temp: '',\r\n        pressure: '',\r\n        wind: '',\r\n        img: [],\r\n        country: '',\r\n        humidity: '',\r\n        description: '',\r\n        error: false\r\n      }\r\n    ],\r\n    forecast: [],\r\n    latitude: '',\r\n    longitude: '',\r\n    isButtonDisabled: false,\r\n    isSearchButtonDisabled: false,\r\n  }\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({\r\n      inputValue: e.target.value\r\n    })\r\n  }\r\n\r\n  handleInputSubmit = (e) => {\r\n    e.preventDefault()\r\n    const Api = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.inputValue}&appid=${ApiKey}&units=metric`\r\n    const ForecastApi = `https://api.openweathermap.org/data/2.5/forecast?q=${this.state.inputValue}&appid=${ApiKey}&units=metric`\r\n\r\n    if (!this.state.inputValue) return alert('Wprowadź miasto!')\r\n    // anty spam for clicking search this same city\r\n    if (this.state.inputValue === this.state.current[0].city) {\r\n      this.setState({\r\n        isSearchButtonDisabled: true,\r\n      })\r\n      setTimeout(() => this.setState({ isSearchButtonDisabled: false }), 2000);\r\n    }\r\n\r\n    // Getting current weather info\r\n    fetch(Api)\r\n      .then(response => {\r\n        if (response.ok) return response\r\n        throw Error('Błąd')\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState(({\r\n          current: [\r\n            {\r\n              inputValue: \"\",\r\n              error: false,\r\n              date: new Date().toLocaleString(),\r\n              city: data.name,\r\n              sunrise: data.sys.sunrise,\r\n              sunset: data.sys.sunset,\r\n              temp: data.main.temp.toFixed(1),\r\n              pressure: `${data.main.pressure} hPa`,\r\n              wind: `${(data.wind.speed * 3.6).toFixed(1)}  km/h`,\r\n              img: `https://openweathermap.org/img/w/${data.weather[0].icon}.png`,\r\n              country: data.sys.country,\r\n              humidity: `${data.main.humidity}%`,\r\n              description: data.weather[0].description.toUpperCase(),\r\n            }]\r\n        }))\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        this.setState({\r\n          current: [{\r\n            error: true,\r\n            city: this.state.inputValue\r\n          }]\r\n        })\r\n      })\r\n\r\n    // Getting forecasts weather info\r\n    fetch(ForecastApi)\r\n      .then(response => {\r\n        if (response.ok) return response\r\n        throw Error('Błąd')\r\n      })\r\n      .then(response => response.json())\r\n\r\n      // Slice forecasts data to 10 obejcts  ---  1 obejct = 3 hours forecast weather\r\n      .then(forecast => forecast.list.slice(0, 10))\r\n      .then(forecast => {\r\n        this.setState({\r\n          forecast\r\n        })\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        this.setState({\r\n          current: [{\r\n            error: true,\r\n            city: this.state.inputValue\r\n          }]\r\n        })\r\n      })\r\n  }\r\n  // Get  geo location after click in button 'Get location'\r\n  handleGetLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        this.setState({\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude,\r\n          isButtonDisabled: true\r\n        })\r\n      });\r\n      // Disabled button after click( anty spam  clicking)\r\n      setTimeout(() => this.setState({ isButtonDisabled: false }), 3000);\r\n    }\r\n    else {\r\n      console.log(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  }\r\n  // Getting automaticaly geo location\r\n  componentDidMount() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        this.setState({\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude,\r\n        })\r\n      });\r\n    }\r\n    else {\r\n      console.log(\"Geolocation is not supported by this browser.\");\r\n    }\r\n\r\n    if (this.state.longitude) {\r\n      this.showFormLoc()\r\n    }\r\n  }\r\n\r\n  // Automaticaly get and show current and forecast weather if user allowed to share geo location\r\n  componentDidUpdate() {\r\n    const currentGeoApi = `https://api.openweathermap.org/data/2.5/weather?lat=${this.state.latitude}&lon=${this.state.longitude}&appid=${ApiKey}&units=metric`\r\n    const forecastGeoApi = `https://api.openweathermap.org/data/2.5/forecast?lat=${this.state.latitude}&lon=${this.state.longitude}&appid=${ApiKey}&units=metric`\r\n    if (this.state.latitude && this.state.longitude) {\r\n\r\n      // get current weather from geo loc\r\n      fetch(currentGeoApi)\r\n        .then(response => {\r\n          if (response.ok) return response\r\n          throw Error('Błąd')\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          const time = new Date().toLocaleString()\r\n          this.setState({\r\n            current: [\r\n              {\r\n                inputValue: \"\",\r\n                error: false,\r\n                date: time,\r\n                city: data.name,\r\n                sunrise: data.sys.sunrise,\r\n                sunset: data.sys.sunset,\r\n                temp: data.main.temp.toFixed(1),\r\n                pressure: `${data.main.pressure} hPa`,\r\n                wind: `${(data.wind.speed * 3.6).toFixed(1)}  km/h`,\r\n                img: `https://openweathermap.org/img/w/${data.weather[0].icon}.png`,\r\n                country: data.sys.country,\r\n                humidity: `${data.main.humidity}%`,\r\n                description: data.weather[0].description.toUpperCase(),\r\n              }],\r\n            latitude: '',\r\n            longitude: '',\r\n          })\r\n        })\r\n        .catch(error => {\r\n          console.log(error)\r\n        })\r\n\r\n      // get forecast weather from geo loc\r\n      fetch(forecastGeoApi)\r\n        .then(response => {\r\n          if (response.ok) return response\r\n          throw Error('Błąd')\r\n        })\r\n        .then(response => response.json())\r\n        .then(forecast => forecast.list.slice(0, 10))\r\n        .then(forecast => {\r\n          this.setState({\r\n            forecast\r\n          })\r\n        })\r\n        .catch(error => {\r\n          console.log(error)\r\n          this.setState({\r\n            current: [{\r\n              error: true,\r\n              city: this.state.inputValue\r\n            }]\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Weather App</h1>\r\n        <Form\r\n          value={this.state.current.inputValue}\r\n          change={this.handleInputChange}\r\n          submit={this.handleInputSubmit}\r\n          location={this.handleGetLocation}\r\n          show={this.showFormLoc}\r\n          isButtonDisabled={this.state.isButtonDisabled}\r\n          isSearchButtonDisabled={this.state.isSearchButtonDisabled} />\r\n        <Result data={this.state} />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}